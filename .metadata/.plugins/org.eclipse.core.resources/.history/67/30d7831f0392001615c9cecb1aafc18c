package agileDesignAndTesting;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import junitparams.JUnitParamsRunner;
import static junitparams.JUnitParamsRunner.$;
import junitparams.Parameters;




@RunWith(JUnitParamsRunner.class)
public class GunCommissionTest {
	
	static GunCommission g;
	@Before
	public void setup(){
		g=new GunCommission();
	}

	@Parameters
	public Object[] invalidParameters() {
		
		
		return $($(0,1,1,1),	//No Locks
				$(1,0,1,1),		//No Stocks
				$(1,1,0,1),		//No Barrels
				$(71,1,1,1),	//71 Locks
				$(1,81,1,1),	//81 Stocks
				$(1,1,91,1),	//91 Barrels
				$(-1,1,1,1),		//Negative Locks
				$(1,-1,1,1),		//Negative Stocks
				$(1,1,-1,1),		//Negative Barrels
				$(1,1,1,-1));	//Negative Ammo
		
	}
	
	
	
	@Parameters
	public Object[] boundaryStockParameters() {
		
		
		return $($(69,1,1,1,632.2),	//69 Locks
				$(70,1,1,1,641.2),	//70 Locks
				$(1,79,1,1,488.2),	//79 Stocks
				$(1,80,1,1,494.2),	//80 Stocks
				$(1,1,89,1,460.2),	//89 Barrels
				$(1,1,90,1,465.2)	//90 Barrels			
				);	
	}
	
	@Parameters
	public Object[] salesValueParameters() {
		
		
		return
				//LOW
				$($(1,1,1,0,10.0),		//100 Sales value
				$(1,1,1,1,10.1),		//101 Sales value
				$(1,1,1,898,99.8),		//998 Sales value
				$(1,1,1,899,99.9),		//999 Sales value
				
				//MID
				$(1,1,1,900,150.0),		//1000 Sales value
				$(1,1,1,1698,269.7),	//1798 Sales value
				$(1,1,1,1699,269.85),	//1799 Sales value
				
				//High
				$(1,1,1,1700,360),		//1800 Sales value			
				$(1,1,1,1701,360.2)		//1801 Sales value			
				);	
	}
	
	@Test(expected=IllegalArgumentException.class)
	@Parameters(method="invalidParameters")
	public void belowMinTest(int l, int s, int b,int a) {
		
		g.calculateCommission(l, s, b, a);
		
	}
	
	@Test
	@Parameters(method="boundaryStockParameters")
	public void lockBoundaryTest(int l, int s, int b,int a,double answer) {
		
		assertEquals(answer, g.calculateCommission(l, s, b, a),0.00001);
		
	}
	
	@Test
	@Parameters(method="salesValueParameters")
	public void salesBoundaryTest(int l, int s, int b,int a,double answer) {
		
		assertEquals(answer, g.calculateCommission(l, s, b, a),0.00001);
		
	}

}
