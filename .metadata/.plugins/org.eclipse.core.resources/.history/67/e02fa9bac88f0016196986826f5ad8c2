package agileDesignAndTesting;

import static org.junit.Assert.*;

import org.junit.Test;
import org.junit.runner.RunWith;

import junitparams.JUnitParamsRunner;
import static junitparams.JUnitParamsRunner.$;
import junitparams.Parameters;

@RunWith(JUnitParamsRunner.class)
public class MarkCheckerTest {

	@Parameters
	public Object[] basicParameters() {
		int one[] = { 20, 20, 20, 20, 20 };

		// Variance between individual scores
		int i1[] = { 20, 20, 20, 20, 16 };
		int i2[] = { 20, 20, 20, 20, 17 };
		int i3[] = { 20, 20, 20, 20, 18 };
		int i4[] = { 20, 20, 20, 20, 19 };
		int i5[] = { 20, 20, 20, 20, 20 };

		// Variance in total score
		int v1[] = { 18, 17, 18, 18, 18 };
		int v2[] = { 18, 18, 18, 18, 18 };
		int v3[] = { 18, 18, 18, 18, 19 };

		return $($(one, i1, 1), 
				$(one, i2, 0), 
				$(one, i3, 0),
				$(one, i4, 0),
				$(one, i5, 0),
				
				
				$(one, five, 2), 
				$(one, six, 0), 
				$(one, seven, 0));

	}

	@Parameters
	public Object[] illegalParameters() {
		int one[] = { -1, 20, 20, 20, 20 };
		int two[] = { 20, 20, 20, 20, 20 };
		int three[] = { 21, 20, 20, 20, 20 };
		return $($(one, two, 0),
				$(one, three, 0));
	}

	@Test
	@Parameters(method = "basicParameters")
	public static void basicTest(int[] one, int[] two, int answer) {
		MarkChecker m = new MarkChecker();
		assertEquals(answer, m.checkMarks(one, two));

	}
	
	@Test(expected=IllegalArgumentException.class)
	@Parameters(method = "illegalParameters")
	public static void illegalTest(int[] one, int[] two, int answer) {
		MarkChecker m = new MarkChecker();
		m.checkMarks(one, two);
		
	}

}

/*
 * 
 * 20,20,20,20,20 20,20,20,20,16
 * 
 * 20,20,20,20,20 20,20,20,20,17
 * 
 * 20,20,20,20,20 20,20,20,20,18
 * 
 * 20,20,20,20,20 20,20,20,20,9
 * 
 * 20,20,20,20,20 20,20,20,20,10
 * 
 * 20,20,20,20,20 20,20,20,20,11
 * 
 */
