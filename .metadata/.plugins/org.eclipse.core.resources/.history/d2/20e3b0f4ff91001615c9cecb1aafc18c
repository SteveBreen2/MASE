package agileDesignAndTesting;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import junitparams.JUnitParamsRunner;
import static junitparams.JUnitParamsRunner.$;
import junitparams.Parameters;




@RunWith(JUnitParamsRunner.class)
public class GunCommissionTest {
	
	static GunCommission g;
	@Before
	public void setup(){
		g=new GunCommission();
	}

	@Parameters
	public Object[] invalidParameters() {
		
		
		return $($(0,1,1,1),	//No Locks
				$(1,0,1,1),		//No Stocks
				$(1,1,0,1),		//No Barrels
				
				$(71,1,1,1),	//71 Locks
				$(1,81,1,1),	//81 Stocks
				$(1,1,91,1));	//91 Barrels
		
	}
	
	
	
	@Parameters
	public Object[] lockParameters() {
		
		
		return $($(69,1,1,1,632.2),	//69 Locks
				$(70,1,1,1,641.2),
				$(1,79,1,1,488.2),
				$(1,80,1,1,494.2),
				$(1,1,89,1,460.2),
				$(1,1,90,1,641.2)				
				);	//70 Locks
	}
	
//	@Test(expected=IllegalArgumentException.class)
//	@Parameters(method="invalidParameters")
//	public void belowMinTest(int l, int s, int b,int a) {
//		
//		g.calculateCommission(l, s, b, a);
//		
//	}
	
	@Test
	@Parameters(method="lockParameters")
	public void lockBoundaryTest(int l, int s, int b,int a,double answer) {
		
		assertEquals(answer, g.calculateCommission(l, s, b, a),0.00001);
		
	}

}
