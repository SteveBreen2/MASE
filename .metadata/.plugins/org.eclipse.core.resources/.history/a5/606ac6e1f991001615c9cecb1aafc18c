package unicore;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

public class MandleBrotMT {

	
	public static void main(){
		System.out.println("running");
	}
	
	
	final static String fileName = "MandleBrot";
	final static int maxIterations = 5000, screenHeight = 1080, screenWidth = 1920;
	

	class MandleBrotThread implements Runnable {
		private double newRealNumber, oldRealNumber, newImaginaryNumber, oldImaginaryNumber, realPixel, imaginaryPixel;
		private int pixelColour;
		private String threadName;
		private Thread t;
		
		
		int type = BufferedImage.TYPE_INT_ARGB;
		BufferedImage image = new BufferedImage(screenWidth, screenHeight, type);
		private int pixelX, pixelY;

		private MandleBrotThread(int pixelXParam, int pixelYParam, BufferedImage image,String threadNameParam) {
			pixelX = pixelXParam;
			pixelY = pixelYParam;
			threadName=threadNameParam;
		}


		@Override
		public void run() {
			newRealNumber = newImaginaryNumber = oldRealNumber = oldImaginaryNumber = 0;
			realPixel = 1.5 * (pixelX - screenWidth / 2);
			imaginaryPixel = (pixelY - screenHeight / 2);

			int iteration = 0;
			for (int i = 0; i < maxIterations; i++) {

				oldRealNumber = newRealNumber;
				oldImaginaryNumber = newImaginaryNumber;

				newRealNumber = Math.pow(oldRealNumber, 2) - Math.pow(oldImaginaryNumber, 2) + realPixel;
				newImaginaryNumber = 2 * oldRealNumber * oldImaginaryNumber + imaginaryPixel;

				iteration++;
				if (Math.pow(newRealNumber, 2) + Math.pow(newImaginaryNumber, 2) > 4) {
					break;
				}
			}

			if (iteration < maxIterations) {
				System.out.println("Iterations[" + iteration + "]");
				pixelColour = Color.HSBtoRGB(iteration % 256, 255, 255 * iteration);
			} else {
				System.out.println("Called iterations>=max");
				pixelColour = Color.HSBtoRGB(iteration % 256, 255, 0);
			}
			image.setRGB(pixelX, pixelY, pixelColour);
			iteration = 0;

			// TODO Auto-generated method stub

			try {
				ImageIO.write(image, "png", new File(fileName + ".png"));
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error Writing Image");
			}
		}
		
		  public void start () {
		      System.out.println("Starting " +  threadName );
		      if (t == null) {
		         t = new Thread (this, threadName);
		         t.start ();
		      }
		   }
	}
}